"use server";

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord Embed

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
export const sendToDiscord = async (message: string) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ID ‡πÅ‡∏•‡∏∞ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      !process.env.NEXT_PUBLIC_DISCORD_ID ||
      !process.env.NEXT_PUBLIC_DISCORD_TOKEN
    ) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Webhook ID ‡∏´‡∏£‡∏∑‡∏≠ Token");
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Webhook ID ‡∏´‡∏£‡∏∑‡∏≠ Token");
    }

    const webhookURL = `https://discord.com/api/webhooks/${process.env.NEXT_PUBLIC_DISCORD_ID}/${process.env.NEXT_PUBLIC_DISCORD_TOKEN}`;
    console.log(
      `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord: ${message.substring(0, 50)}${
        message.length > 50 ? "..." : ""
      }`
    );

    const response = await fetch(webhookURL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: message }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status} ${errorText}`
      );
      throw new Error(`‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status}`);
    }

    console.log("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    return { success: true };
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord:", error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö rich embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
export const sendDiscordEmbed = async (embeds: Promise<DiscordEmbed[]>) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ID ‡πÅ‡∏•‡∏∞ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      !process.env.NEXT_PUBLIC_DISCORD_ID ||
      !process.env.NEXT_PUBLIC_DISCORD_TOKEN
    ) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Webhook ID ‡∏´‡∏£‡∏∑‡∏≠ Token");
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Webhook ID ‡∏´‡∏£‡∏∑‡∏≠ Token");
    }

    const webhookURL = `https://discord.com/api/webhooks/${process.env.NEXT_PUBLIC_DISCORD_ID}/${process.env.NEXT_PUBLIC_DISCORD_TOKEN}`;
    console.log(
      `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord: ${JSON.stringify(embeds).substring(
        0,
        100
      )}...`
    );

    const response = await fetch(webhookURL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ embeds }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status} ${errorText}`
      );
      throw new Error(`‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status}`);
    }

    console.log("‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    return { success: true };
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord:", error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
export const sendDiscordMessageWithEmbed = async (
  content: string,
  embeds: DiscordEmbed[]
) => {
  const webhookURL = `https://discord.com/api/webhooks/${process.env.NEXT_PUBLIC_DISCORD_ID}/${process.env.NEXT_PUBLIC_DISCORD_TOKEN}`;

  await fetch(webhookURL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ content, embeds }),
  });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ branch ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô main ‡∏´‡∏£‡∏∑‡∏≠ develop ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export async function isTargetBranch(ref?: string) {
  if (!ref) return false;

  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á ref ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "refs/heads/branch_name"
  const branchName = ref.replace("refs/heads/", "");
  return (
    branchName === "main" || branchName === "develop" || branchName === "master"
  );
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Discord Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord

export async function createDiscordEmbed(
  payload: GitHubPayload
): Promise<DiscordEmbed[]> {
  const { repository, sender, head_commit, commits, ref } = payload;

  if (!repository || !sender) {
    return [
      {
        title: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        description: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å GitHub ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        color: 16776960, // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      },
    ];
  }

  const branchName = ref ? ref.replace("refs/heads/", "") : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  const commit =
    head_commit || (commits && commits.length > 0 ? commits[0] : null);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embed
  const fields = [
    {
      name: "üìÇ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ",
      value: repository.full_name,
      inline: true,
    },
    {
      name: "üåø Branch",
      value: branchName,
      inline: true,
    },
    {
      name: "üë®‚Äçüíª ‡∏ú‡∏π‡πâ Deploy",
      value: sender.login,
      inline: true,
    },
  ];

  if (commit) {
    fields.push(
      {
        name: "üìù Commit Message",
        value: commit.message,
        inline: false,
      },
      {
        name: "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤",
        value: commit.timestamp
          ? new Date(commit.timestamp).toLocaleString("th-TH")
          : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        inline: false,
      }
    );
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° branch
  let color = 5814783; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  if (branchName === "main" || branchName === "master") {
    color = 5763719; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  } else if (branchName === "develop") {
    color = 16750899; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
  }

  return [
    {
      title: `üöÄ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ ${repository.name}`,
      description: `‡∏°‡∏µ‡∏Å‡∏≤‡∏£ deploy ‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch ${branchName} ‡πÇ‡∏î‡∏¢ ${sender.login}`,
      color: color,
      fields: fields,
      timestamp: new Date().toISOString(),
      footer: {
        text: "AI Code Review System",
        icon_url:
          "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
      },
      thumbnail: {
        url: sender.avatar_url,
      },
      url: commit ? commit.url : repository.html_url,
    },
  ];
}
