import { sendDiscordEmbed } from "@/utils/discord";
import { NextRequest, NextResponse } from "next/server";

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub webhook payload
interface GitHubPayload {
  repository: {
    name: string;
    full_name: string;
    html_url: string;
  };
  ref?: string;
  ref_name?: string;
  pusher?: {
    name: string;
    email: string;
  };
  sender: {
    login: string;
    avatar_url: string;
    html_url: string;
  };
  commits?: Array<{
    id: string;
    message: string;
    url: string;
    timestamp: string;
  }>;
  head_commit?: {
    id: string;
    message: string;
    url: string;
    timestamp: string;
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ branch ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô main ‡∏´‡∏£‡∏∑‡∏≠ develop ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isTargetBranch(ref?: string): boolean {
  if (!ref) return false;

  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á ref ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "refs/heads/branch_name"
  const branchName = ref.replace("refs/heads/", "");
  return (
    branchName === "main" || branchName === "develop" || branchName === "master"
  );
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Discord Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord

async function createDiscordEmbed(payload: GitHubPayload) {
  const { repository, sender, head_commit, commits, ref } = payload;

  if (!repository || !sender) {
    return [
      {
        title: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        description: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å GitHub ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        color: 16776960, // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      },
    ];
  }

  const branchName = ref ? ref.replace("refs/heads/", "") : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  const commit =
    head_commit || (commits && commits.length > 0 ? commits[0] : null);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embed
  const fields = [
    {
      name: "üìÇ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ",
      value: repository.full_name,
      inline: true,
    },
    {
      name: "üåø Branch",
      value: branchName,
      inline: true,
    },
    {
      name: "üë®‚Äçüíª ‡∏ú‡∏π‡πâ Deploy",
      value: sender.login,
      inline: true,
    },
  ];

  if (commit) {
    fields.push(
      {
        name: "üìù Commit Message",
        value: commit.message,
        inline: false,
      },
      {
        name: "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤",
        value: commit.timestamp
          ? new Date(commit.timestamp).toLocaleString("th-TH")
          : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        inline: false,
      }
    );
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° branch
  let color = 5814783; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  if (branchName === "main" || branchName === "master") {
    color = 5763719; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  } else if (branchName === "develop") {
    color = 16750899; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
  }

  return [
    {
      title: `üöÄ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ ${repository.name}`,
      description: `‡∏°‡∏µ‡∏Å‡∏≤‡∏£ deploy ‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch ${branchName} ‡πÇ‡∏î‡∏¢ ${sender.login}`,
      color: color,
      fields: fields,
      timestamp: new Date().toISOString(),
      footer: {
        text: "AI Code Review System",
        icon_url:
          "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
      },
      thumbnail: {
        url: sender.avatar_url,
      },
      url: commit ? commit.url : repository.html_url,
    },
  ];
}

export async function POST(request: NextRequest) {
  try {
    const payload: GitHubPayload = await request.json();
    console.log(
      "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö GitHub webhook payload:",
      JSON.stringify(payload, null, 2)
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô branch ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!isTargetBranch(payload.ref)) {
      console.log(`‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà branch ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${payload.ref}`);
      return NextResponse.json(
        { message: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà branch ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (main ‡∏´‡∏£‡∏∑‡∏≠ develop)" },
        { status: 200 }
      );
    }

    console.log(`‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å branch ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${payload.ref}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
    const embeds = await createDiscordEmbed(payload);
    console.log(
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord:",
      JSON.stringify(embeds, null, 2)
    );

    await sendDiscordEmbed(embeds);
    console.log("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deployment ‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    try {
      const { repository, sender, head_commit, commits, ref } = payload;
      const branchName = ref ? ref.replace("refs/heads/", "") : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
      const commit =
        head_commit || (commits && commits.length > 0 ? commits[0] : null);

      if (repository && sender && commit) {
        console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deployment");

        // ‡πÉ‡∏ä‡πâ absolute URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        const deploymentResponse = await fetch(
          "http://localhost:3000/api/deployments",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              projectName: repository.name,
              branch: branchName,
              deployedBy: sender.login,
              commitMessage: commit.message,
              commitUrl: commit.url,
              repositoryUrl: repository.html_url,
            }),
          }
        );

        if (!deploymentResponse.ok) {
          throw new Error(
            `‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deployment ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${deploymentResponse.status}`
          );
        }

        console.log("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deployment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (deploymentError) {
      console.error(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deployment:",
        deploymentError
      );
      // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }

    return NextResponse.json({
      success: true,
      message: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• webhook:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• webhook" },
      { status: 500 }
    );
  }
}
